name: nix flow
on:
  pull_request:
  push:
    branches:
      - master
      - release/**
    tags:
      - '*'

jobs:
  lintpy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v11
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/84d74ae9c9cbed73274b8e4e00be14688ffc93fe.tar.gz
    - name: use cachix
      run: |
        nix-env -iA cachix -f https://cachix.org/api/v1/install
        cachix use crypto-com
    - name: lint python
      run: nix-shell -E "$SHELL" --run "$CMD"
      env:
        CMD: >
          flake8 --show-source --count --statistics
          --format="::error file=%(path)s,line=%(row)d,col=%(col)d::%(path)s:%(row)d:%(col)d: %(code)s %(text)s"
        SHELL: >
          with import <nixpkgs> {};
          mkShell {
            buildInputs = [
              (poetry2nix.mkPoetryEnv { projectDir = ./integration_tests; })
            ];
          }

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v11
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/84d74ae9c9cbed73274b8e4e00be14688ffc93fe.tar.gz
    - uses: cachix/cachix-action@v6
      if: github.ref == 'refs/heads/master'
      with:
        name: crypto-com
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
    - run: |
        nix-env -iA cachix -f https://cachix.org/api/v1/install
        cachix use crypto-com
      if: github.ref != 'refs/heads/master'
    - name: Run integration tests
      run: make nix-integration-test
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.*.txt
        flags: integration_tests
    - name: Publish docker image
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      run: |
        nix-build -A pystarportImage docker.nix
        IMAGE=$(docker load < result)
        IMAGE=${IMAGE#Loaded image: }
        if [[ "$GITHUB_REF" = "refs/tags/"* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        else
          TAG="latest"
        fi
        TARGET="docker.pkg.github.com/${{ github.repository }}/chain-main-pystarport:$TAG"
        docker tag $IMAGE $TARGET
        docker login -u "$GITHUB_ACTOR" -p "${{ github.token }}" docker.pkg.github.com
        docker push $TARGET
        echo "pushed: $TARGET"
