// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscription/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreatePlan struct {
	Owner        string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Title        string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description  string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price" yaml:"price"`
	DurationSecs uint32                                   `protobuf:"varint,5,opt,name=duration_secs,json=durationSecs,proto3" json:"duration_secs,omitempty"`
	CronSpec     CronSpec                                 `protobuf:"bytes,6,opt,name=cron_spec,json=cronSpec,proto3" json:"cron_spec"`
	Tzoffset     int32                                    `protobuf:"varint,7,opt,name=tzoffset,proto3" json:"tzoffset,omitempty"`
}

func (m *MsgCreatePlan) Reset()         { *m = MsgCreatePlan{} }
func (m *MsgCreatePlan) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePlan) ProtoMessage()    {}
func (*MsgCreatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{0}
}
func (m *MsgCreatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePlan.Merge(m, src)
}
func (m *MsgCreatePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePlan proto.InternalMessageInfo

func (m *MsgCreatePlan) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreatePlan) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreatePlan) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreatePlan) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgCreatePlan) GetDurationSecs() uint32 {
	if m != nil {
		return m.DurationSecs
	}
	return 0
}

func (m *MsgCreatePlan) GetCronSpec() CronSpec {
	if m != nil {
		return m.CronSpec
	}
	return CronSpec{}
}

func (m *MsgCreatePlan) GetTzoffset() int32 {
	if m != nil {
		return m.Tzoffset
	}
	return 0
}

type MsgCreatePlanResponse struct {
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id" yaml:"plan_id"`
}

func (m *MsgCreatePlanResponse) Reset()         { *m = MsgCreatePlanResponse{} }
func (m *MsgCreatePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePlanResponse) ProtoMessage()    {}
func (*MsgCreatePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{1}
}
func (m *MsgCreatePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePlanResponse.Merge(m, src)
}
func (m *MsgCreatePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePlanResponse proto.InternalMessageInfo

func (m *MsgCreatePlanResponse) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

type MsgStopPlan struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	PlanId uint64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id" yaml:"plan_id"`
}

func (m *MsgStopPlan) Reset()         { *m = MsgStopPlan{} }
func (m *MsgStopPlan) String() string { return proto.CompactTextString(m) }
func (*MsgStopPlan) ProtoMessage()    {}
func (*MsgStopPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{2}
}
func (m *MsgStopPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopPlan.Merge(m, src)
}
func (m *MsgStopPlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopPlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopPlan proto.InternalMessageInfo

func (m *MsgStopPlan) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgStopPlan) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

type MsgStopPlanResponse struct {
}

func (m *MsgStopPlanResponse) Reset()         { *m = MsgStopPlanResponse{} }
func (m *MsgStopPlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStopPlanResponse) ProtoMessage()    {}
func (*MsgStopPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{3}
}
func (m *MsgStopPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopPlanResponse.Merge(m, src)
}
func (m *MsgStopPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopPlanResponse proto.InternalMessageInfo

type MsgCreateSubscription struct {
	Subscriber string `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	PlanId     uint64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id" yaml:"plan_id"`
}

func (m *MsgCreateSubscription) Reset()         { *m = MsgCreateSubscription{} }
func (m *MsgCreateSubscription) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubscription) ProtoMessage()    {}
func (*MsgCreateSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{4}
}
func (m *MsgCreateSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubscription.Merge(m, src)
}
func (m *MsgCreateSubscription) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubscription proto.InternalMessageInfo

func (m *MsgCreateSubscription) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *MsgCreateSubscription) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

type MsgCreateSubscriptionResponse struct {
	SubscriptionId uint64 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id" yaml:"subscription_id"`
}

func (m *MsgCreateSubscriptionResponse) Reset()         { *m = MsgCreateSubscriptionResponse{} }
func (m *MsgCreateSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubscriptionResponse) ProtoMessage()    {}
func (*MsgCreateSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{5}
}
func (m *MsgCreateSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubscriptionResponse.Merge(m, src)
}
func (m *MsgCreateSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubscriptionResponse proto.InternalMessageInfo

func (m *MsgCreateSubscriptionResponse) GetSubscriptionId() uint64 {
	if m != nil {
		return m.SubscriptionId
	}
	return 0
}

type MsgStopSubscription struct {
	Subscriber     string `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	SubscriptionId uint64 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id" yaml:"subscription_id"`
}

func (m *MsgStopSubscription) Reset()         { *m = MsgStopSubscription{} }
func (m *MsgStopSubscription) String() string { return proto.CompactTextString(m) }
func (*MsgStopSubscription) ProtoMessage()    {}
func (*MsgStopSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{6}
}
func (m *MsgStopSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopSubscription.Merge(m, src)
}
func (m *MsgStopSubscription) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopSubscription proto.InternalMessageInfo

func (m *MsgStopSubscription) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *MsgStopSubscription) GetSubscriptionId() uint64 {
	if m != nil {
		return m.SubscriptionId
	}
	return 0
}

type MsgStopSubscriptionResponse struct {
}

func (m *MsgStopSubscriptionResponse) Reset()         { *m = MsgStopSubscriptionResponse{} }
func (m *MsgStopSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStopSubscriptionResponse) ProtoMessage()    {}
func (*MsgStopSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{7}
}
func (m *MsgStopSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopSubscriptionResponse.Merge(m, src)
}
func (m *MsgStopSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopSubscriptionResponse proto.InternalMessageInfo

type MsgStopUserSubscription struct {
	PlanOwner      string `protobuf:"bytes,1,opt,name=plan_owner,json=planOwner,proto3" json:"plan_owner,omitempty"`
	SubscriptionId uint64 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id" yaml:"subscription_id"`
}

func (m *MsgStopUserSubscription) Reset()         { *m = MsgStopUserSubscription{} }
func (m *MsgStopUserSubscription) String() string { return proto.CompactTextString(m) }
func (*MsgStopUserSubscription) ProtoMessage()    {}
func (*MsgStopUserSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{8}
}
func (m *MsgStopUserSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopUserSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopUserSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopUserSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopUserSubscription.Merge(m, src)
}
func (m *MsgStopUserSubscription) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopUserSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopUserSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopUserSubscription proto.InternalMessageInfo

func (m *MsgStopUserSubscription) GetPlanOwner() string {
	if m != nil {
		return m.PlanOwner
	}
	return ""
}

func (m *MsgStopUserSubscription) GetSubscriptionId() uint64 {
	if m != nil {
		return m.SubscriptionId
	}
	return 0
}

type MsgStopUserSubscriptionResponse struct {
}

func (m *MsgStopUserSubscriptionResponse) Reset()         { *m = MsgStopUserSubscriptionResponse{} }
func (m *MsgStopUserSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStopUserSubscriptionResponse) ProtoMessage()    {}
func (*MsgStopUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b2ee80a756dbe3, []int{9}
}
func (m *MsgStopUserSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopUserSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopUserSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopUserSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopUserSubscriptionResponse.Merge(m, src)
}
func (m *MsgStopUserSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopUserSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopUserSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopUserSubscriptionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreatePlan)(nil), "subscription.v1.MsgCreatePlan")
	proto.RegisterType((*MsgCreatePlanResponse)(nil), "subscription.v1.MsgCreatePlanResponse")
	proto.RegisterType((*MsgStopPlan)(nil), "subscription.v1.MsgStopPlan")
	proto.RegisterType((*MsgStopPlanResponse)(nil), "subscription.v1.MsgStopPlanResponse")
	proto.RegisterType((*MsgCreateSubscription)(nil), "subscription.v1.MsgCreateSubscription")
	proto.RegisterType((*MsgCreateSubscriptionResponse)(nil), "subscription.v1.MsgCreateSubscriptionResponse")
	proto.RegisterType((*MsgStopSubscription)(nil), "subscription.v1.MsgStopSubscription")
	proto.RegisterType((*MsgStopSubscriptionResponse)(nil), "subscription.v1.MsgStopSubscriptionResponse")
	proto.RegisterType((*MsgStopUserSubscription)(nil), "subscription.v1.MsgStopUserSubscription")
	proto.RegisterType((*MsgStopUserSubscriptionResponse)(nil), "subscription.v1.MsgStopUserSubscriptionResponse")
}

func init() { proto.RegisterFile("subscription/v1/tx.proto", fileDescriptor_a5b2ee80a756dbe3) }

var fileDescriptor_a5b2ee80a756dbe3 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x93, 0xa6, 0x3f, 0xb7, 0x3f, 0xdf, 0x27, 0xd3, 0x82, 0x31, 0xc4, 0x0e, 0x06, 0xa1,
	0x2c, 0x88, 0x4d, 0x8a, 0xc4, 0x02, 0x58, 0xa0, 0x74, 0xd5, 0x45, 0x29, 0x72, 0x28, 0x0b, 0x58,
	0x54, 0xce, 0x64, 0xea, 0x5a, 0x24, 0x1e, 0x33, 0x33, 0xfd, 0xe3, 0x1d, 0x90, 0xfa, 0x1c, 0x3c,
	0x49, 0x77, 0x74, 0xc9, 0x2a, 0xa0, 0x76, 0xd7, 0x65, 0x25, 0xf6, 0xc8, 0xe3, 0xd8, 0x4c, 0x52,
	0x37, 0x6a, 0x11, 0x6c, 0x92, 0x99, 0x7b, 0xae, 0xef, 0x39, 0x73, 0x7c, 0xef, 0x18, 0x34, 0xb6,
	0xd3, 0x66, 0x88, 0x06, 0x11, 0x0f, 0x48, 0xe8, 0xec, 0x36, 0x1c, 0xbe, 0x6f, 0x47, 0x94, 0x70,
	0xa2, 0xfe, 0x27, 0x23, 0xf6, 0x6e, 0x43, 0x5f, 0xf4, 0x89, 0x4f, 0x04, 0xe6, 0xc4, 0xab, 0x24,
	0x4d, 0x37, 0x10, 0x61, 0x3d, 0xc2, 0x9c, 0xb6, 0xc7, 0xb0, 0xb3, 0xdb, 0x68, 0x63, 0xee, 0x35,
	0x1c, 0x44, 0x82, 0x30, 0xc5, 0x47, 0x09, 0x10, 0x25, 0x21, 0x8b, 0x30, 0x4a, 0x70, 0xeb, 0x6b,
	0x11, 0xe6, 0xd7, 0x98, 0xbf, 0x42, 0xb1, 0xc7, 0xf1, 0xeb, 0xae, 0x17, 0xaa, 0x8b, 0x50, 0x26,
	0x7b, 0x21, 0xa6, 0x9a, 0x52, 0x55, 0x6a, 0x33, 0x6e, 0xb2, 0x89, 0xa3, 0x3c, 0xe0, 0x5d, 0xac,
	0x15, 0x93, 0xa8, 0xd8, 0xa8, 0x55, 0x98, 0xed, 0xe0, 0xac, 0xbc, 0x56, 0x12, 0x98, 0x1c, 0x52,
	0x3f, 0x42, 0x39, 0xa2, 0x01, 0xc2, 0xda, 0x44, 0xb5, 0x54, 0x9b, 0x5d, 0xbe, 0x6d, 0x27, 0x7a,
	0xed, 0x58, 0xaf, 0x3d, 0xd0, 0x6b, 0xaf, 0x90, 0x20, 0x6c, 0xbe, 0x3c, 0xea, 0x9b, 0x85, 0xf3,
	0xbe, 0x39, 0x77, 0xe0, 0xf5, 0xba, 0xcf, 0x2c, 0xf1, 0x94, 0xf5, 0xe5, 0xbb, 0x59, 0xf3, 0x03,
	0xbe, 0xbd, 0xd3, 0xb6, 0x11, 0xe9, 0x39, 0x83, 0xc3, 0x26, 0x7f, 0x75, 0xd6, 0xf9, 0xe0, 0xf0,
	0x83, 0x08, 0x33, 0x51, 0x80, 0xb9, 0x09, 0x93, 0x7a, 0x1f, 0xe6, 0x3b, 0x3b, 0xd4, 0x8b, 0xe9,
	0x37, 0x19, 0x46, 0x4c, 0x2b, 0x57, 0x95, 0xda, 0xbc, 0x3b, 0x97, 0x06, 0x5b, 0x18, 0x31, 0xf5,
	0x05, 0xcc, 0xc4, 0x4e, 0x6c, 0xc6, 0x56, 0x68, 0x93, 0x55, 0x45, 0x68, 0x1b, 0xb1, 0xdc, 0x5e,
	0xa1, 0x24, 0x6c, 0x45, 0x18, 0x35, 0x27, 0x62, 0x6d, 0xee, 0x34, 0x1a, 0xec, 0x55, 0x1d, 0xa6,
	0xf9, 0x27, 0xb2, 0xb5, 0xc5, 0x30, 0xd7, 0xa6, 0xaa, 0x4a, 0xad, 0xec, 0x66, 0x7b, 0x6b, 0x1d,
	0x96, 0x86, 0x0c, 0x75, 0x31, 0x8b, 0x48, 0xc8, 0xb0, 0xfa, 0x14, 0xa6, 0xa2, 0xae, 0x17, 0x6e,
	0x06, 0x1d, 0x61, 0xed, 0x44, 0xb3, 0x72, 0xd6, 0x37, 0xd3, 0xd0, 0x79, 0xdf, 0x5c, 0x18, 0x1c,
	0x3c, 0x09, 0x58, 0xee, 0x64, 0xbc, 0x5a, 0xed, 0x58, 0xef, 0x61, 0x76, 0x8d, 0xf9, 0x2d, 0x4e,
	0xa2, 0x31, 0xef, 0x47, 0x2a, 0x5e, 0xbc, 0x4e, 0xf1, 0x25, 0xb8, 0x21, 0x15, 0x4f, 0xb5, 0x5a,
	0x44, 0x3a, 0x44, 0x4b, 0x72, 0x45, 0x35, 0x00, 0x06, 0x2e, 0xb5, 0x33, 0x09, 0x52, 0xe4, 0x8f,
	0x75, 0xec, 0x41, 0x25, 0x97, 0x30, 0x73, 0xef, 0x2d, 0x0c, 0x4d, 0xc4, 0x6f, 0x17, 0xeb, 0x67,
	0x7d, 0x73, 0x14, 0x3a, 0xef, 0x9b, 0x37, 0x13, 0xa2, 0x11, 0xc0, 0x72, 0x17, 0xe4, 0xc8, 0x6a,
	0xc7, 0xfa, 0xac, 0x64, 0x0e, 0x5c, 0xeb, 0xa0, 0x39, 0x7a, 0x8a, 0x7f, 0x43, 0x4f, 0x05, 0xee,
	0xe4, 0xc8, 0xc9, 0x5e, 0xcc, 0xa1, 0x02, 0xb7, 0x06, 0xf8, 0x06, 0xc3, 0x74, 0x48, 0x72, 0x05,
	0x40, 0xf8, 0x2a, 0xb7, 0xc7, 0x4c, 0x1c, 0x59, 0x17, 0x2d, 0xf2, 0xaf, 0x14, 0xdf, 0x03, 0xf3,
	0x12, 0x45, 0xa9, 0xea, 0xe5, 0x9f, 0x25, 0x28, 0xad, 0x31, 0x5f, 0x7d, 0x03, 0x20, 0xdd, 0x34,
	0xc6, 0x85, 0x81, 0x1b, 0x1a, 0x1c, 0xfd, 0xe1, 0x78, 0x3c, 0x6b, 0x8d, 0x57, 0x30, 0x9d, 0x4d,
	0xc7, 0xdd, 0xbc, 0x67, 0x52, 0x54, 0x7f, 0x30, 0x0e, 0xcd, 0xea, 0x75, 0x41, 0xcd, 0xe9, 0xfc,
	0x31, 0x6a, 0xe4, 0x3c, 0xdd, 0xbe, 0x5a, 0x5e, 0xc6, 0xb6, 0x05, 0xff, 0x5f, 0x68, 0xbe, 0x4b,
	0x75, 0x0e, 0x31, 0x3d, 0xba, 0x4a, 0x56, 0xc6, 0x43, 0x61, 0x31, 0xb7, 0x6b, 0x6a, 0x97, 0x55,
	0x19, 0xcd, 0xd4, 0x1f, 0x5f, 0x35, 0x33, 0xe5, 0x6c, 0x6e, 0x1c, 0x9d, 0x18, 0xca, 0xf1, 0x89,
	0xa1, 0xfc, 0x38, 0x31, 0x94, 0xc3, 0x53, 0xa3, 0x70, 0x7c, 0x6a, 0x14, 0xbe, 0x9d, 0x1a, 0x85,
	0x77, 0xcf, 0xe5, 0x5b, 0x9d, 0x1e, 0x44, 0x9c, 0xd4, 0x09, 0xf5, 0xeb, 0x68, 0xdb, 0x0b, 0x42,
	0x47, 0xfc, 0xd6, 0x7b, 0xf1, 0x72, 0xdf, 0x19, 0xfa, 0x80, 0x89, 0xeb, 0xbe, 0x3d, 0x29, 0xbe,
	0x5d, 0x4f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x2a, 0x8d, 0xf3, 0x3e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreatePlan(ctx context.Context, in *MsgCreatePlan, opts ...grpc.CallOption) (*MsgCreatePlanResponse, error)
	StopPlan(ctx context.Context, in *MsgStopPlan, opts ...grpc.CallOption) (*MsgStopPlanResponse, error)
	CreateSubscription(ctx context.Context, in *MsgCreateSubscription, opts ...grpc.CallOption) (*MsgCreateSubscriptionResponse, error)
	StopSubscription(ctx context.Context, in *MsgStopSubscription, opts ...grpc.CallOption) (*MsgStopSubscriptionResponse, error)
	StopUserSubscription(ctx context.Context, in *MsgStopUserSubscription, opts ...grpc.CallOption) (*MsgStopUserSubscriptionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreatePlan(ctx context.Context, in *MsgCreatePlan, opts ...grpc.CallOption) (*MsgCreatePlanResponse, error) {
	out := new(MsgCreatePlanResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1.Msg/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StopPlan(ctx context.Context, in *MsgStopPlan, opts ...grpc.CallOption) (*MsgStopPlanResponse, error) {
	out := new(MsgStopPlanResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1.Msg/StopPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSubscription(ctx context.Context, in *MsgCreateSubscription, opts ...grpc.CallOption) (*MsgCreateSubscriptionResponse, error) {
	out := new(MsgCreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1.Msg/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StopSubscription(ctx context.Context, in *MsgStopSubscription, opts ...grpc.CallOption) (*MsgStopSubscriptionResponse, error) {
	out := new(MsgStopSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1.Msg/StopSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StopUserSubscription(ctx context.Context, in *MsgStopUserSubscription, opts ...grpc.CallOption) (*MsgStopUserSubscriptionResponse, error) {
	out := new(MsgStopUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1.Msg/StopUserSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreatePlan(context.Context, *MsgCreatePlan) (*MsgCreatePlanResponse, error)
	StopPlan(context.Context, *MsgStopPlan) (*MsgStopPlanResponse, error)
	CreateSubscription(context.Context, *MsgCreateSubscription) (*MsgCreateSubscriptionResponse, error)
	StopSubscription(context.Context, *MsgStopSubscription) (*MsgStopSubscriptionResponse, error)
	StopUserSubscription(context.Context, *MsgStopUserSubscription) (*MsgStopUserSubscriptionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreatePlan(ctx context.Context, req *MsgCreatePlan) (*MsgCreatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (*UnimplementedMsgServer) StopPlan(ctx context.Context, req *MsgStopPlan) (*MsgStopPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlan not implemented")
}
func (*UnimplementedMsgServer) CreateSubscription(ctx context.Context, req *MsgCreateSubscription) (*MsgCreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (*UnimplementedMsgServer) StopSubscription(ctx context.Context, req *MsgStopSubscription) (*MsgStopSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSubscription not implemented")
}
func (*UnimplementedMsgServer) StopUserSubscription(ctx context.Context, req *MsgStopUserSubscription) (*MsgStopUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopUserSubscription not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1.Msg/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePlan(ctx, req.(*MsgCreatePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StopPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStopPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StopPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1.Msg/StopPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StopPlan(ctx, req.(*MsgStopPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1.Msg/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubscription(ctx, req.(*MsgCreateSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StopSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStopSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StopSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1.Msg/StopSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StopSubscription(ctx, req.(*MsgStopSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StopUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStopUserSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StopUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1.Msg/StopUserSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StopUserSubscription(ctx, req.(*MsgStopUserSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _Msg_CreatePlan_Handler,
		},
		{
			MethodName: "StopPlan",
			Handler:    _Msg_StopPlan_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _Msg_CreateSubscription_Handler,
		},
		{
			MethodName: "StopSubscription",
			Handler:    _Msg_StopSubscription_Handler,
		},
		{
			MethodName: "StopUserSubscription",
			Handler:    _Msg_StopUserSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription/v1/tx.proto",
}

func (m *MsgCreatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tzoffset != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Tzoffset))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.CronSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.DurationSecs != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationSecs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubscriptionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubscriptionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubscriptionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubscriptionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStopUserSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopUserSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopUserSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubscriptionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubscriptionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlanOwner) > 0 {
		i -= len(m.PlanOwner)
		copy(dAtA[i:], m.PlanOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PlanOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopUserSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopUserSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopUserSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.DurationSecs != 0 {
		n += 1 + sovTx(uint64(m.DurationSecs))
	}
	l = m.CronSpec.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Tzoffset != 0 {
		n += 1 + sovTx(uint64(m.Tzoffset))
	}
	return n
}

func (m *MsgCreatePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	return n
}

func (m *MsgStopPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	return n
}

func (m *MsgStopPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	return n
}

func (m *MsgCreateSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionId != 0 {
		n += 1 + sovTx(uint64(m.SubscriptionId))
	}
	return n
}

func (m *MsgStopSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubscriptionId != 0 {
		n += 1 + sovTx(uint64(m.SubscriptionId))
	}
	return n
}

func (m *MsgStopSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStopUserSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubscriptionId != 0 {
		n += 1 + sovTx(uint64(m.SubscriptionId))
	}
	return n
}

func (m *MsgStopUserSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationSecs", wireType)
			}
			m.DurationSecs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationSecs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CronSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tzoffset", wireType)
			}
			m.Tzoffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tzoffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			m.SubscriptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			m.SubscriptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopUserSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopUserSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopUserSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			m.SubscriptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopUserSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopUserSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopUserSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
