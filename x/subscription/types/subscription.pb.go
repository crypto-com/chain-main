// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscription/v1/subscription.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// https://github.com/crypto-org-chain/chain-main/blob/master/x/subscription/spec/05_params.md
type Params struct {
	SubscriptionEnabled bool   `protobuf:"varint,1,opt,name=subscription_enabled,json=subscriptionEnabled,proto3" json:"subscription_enabled,omitempty"`
	GasPerCollection    uint32 `protobuf:"varint,2,opt,name=gas_per_collection,json=gasPerCollection,proto3" json:"gas_per_collection,omitempty"`
	FailureTolerance    uint32 `protobuf:"varint,3,opt,name=failure_tolerance,json=failureTolerance,proto3" json:"failure_tolerance,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5dc72c943f2a0e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSubscriptionEnabled() bool {
	if m != nil {
		return m.SubscriptionEnabled
	}
	return false
}

func (m *Params) GetGasPerCollection() uint32 {
	if m != nil {
		return m.GasPerCollection
	}
	return 0
}

func (m *Params) GetFailureTolerance() uint32 {
	if m != nil {
		return m.FailureTolerance
	}
	return 0
}

// https://github.com/crypto-org-chain/chain-main/blob/master/x/subscription/spec/02_state.md
type Plan struct {
	Owner        string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Title        string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description  string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price" yaml:"price"`
	DurationSecs uint32                                   `protobuf:"varint,5,opt,name=duration_secs,json=durationSecs,proto3" json:"duration_secs,omitempty"`
	CronSpec     CronSpec                                 `protobuf:"bytes,6,opt,name=cron_spec,json=cronSpec,proto3" json:"cron_spec"`
	Tzoffset     int32                                    `protobuf:"varint,7,opt,name=tzoffset,proto3" json:"tzoffset,omitempty"`
	PlanId       uint64                                   `protobuf:"varint,8,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5dc72c943f2a0e, []int{1}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Plan) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Plan) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Plan) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Plan) GetDurationSecs() uint32 {
	if m != nil {
		return m.DurationSecs
	}
	return 0
}

func (m *Plan) GetCronSpec() CronSpec {
	if m != nil {
		return m.CronSpec
	}
	return CronSpec{}
}

func (m *Plan) GetTzoffset() int32 {
	if m != nil {
		return m.Tzoffset
	}
	return 0
}

func (m *Plan) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

// https://github.com/crypto-org-chain/chain-main/blob/master/x/subscription/spec/02_state.md
type Subscription struct {
	SubscriptionId     uint64 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	PlanId             uint64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Subscriber         string `protobuf:"bytes,3,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	CreateTime         uint64 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	NextCollectionTime uint64 `protobuf:"varint,5,opt,name=next_collection_time,json=nextCollectionTime,proto3" json:"next_collection_time,omitempty"`
	ExpirationTime     uint64 `protobuf:"varint,6,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	PaymentFailures    uint32 `protobuf:"varint,7,opt,name=payment_failures,json=paymentFailures,proto3" json:"payment_failures,omitempty"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5dc72c943f2a0e, []int{2}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetSubscriptionId() uint64 {
	if m != nil {
		return m.SubscriptionId
	}
	return 0
}

func (m *Subscription) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *Subscription) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *Subscription) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Subscription) GetNextCollectionTime() uint64 {
	if m != nil {
		return m.NextCollectionTime
	}
	return 0
}

func (m *Subscription) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func (m *Subscription) GetPaymentFailures() uint32 {
	if m != nil {
		return m.PaymentFailures
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "subscription.v1.Params")
	proto.RegisterType((*Plan)(nil), "subscription.v1.Plan")
	proto.RegisterType((*Subscription)(nil), "subscription.v1.Subscription")
}

func init() {
	proto.RegisterFile("subscription/v1/subscription.proto", fileDescriptor_6b5dc72c943f2a0e)
}

var fileDescriptor_6b5dc72c943f2a0e = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x53, 0xcf, 0x52, 0xd3, 0x40,
	0x18, 0x6f, 0x4a, 0x5b, 0xda, 0x05, 0x04, 0xd7, 0xce, 0x18, 0x39, 0xa4, 0x9d, 0x7a, 0xa0, 0x8e,
	0x36, 0xb1, 0x7a, 0x53, 0x0f, 0x0e, 0x8c, 0xce, 0x70, 0x63, 0x02, 0x5e, 0xbc, 0x64, 0x36, 0x9b,
	0x8f, 0xb2, 0x63, 0xb2, 0x1b, 0x77, 0xb7, 0x48, 0x7d, 0x0a, 0x4f, 0xfa, 0x0e, 0x3e, 0x09, 0x47,
	0x8e, 0x9e, 0xc0, 0x81, 0x37, 0xf0, 0x09, 0x9c, 0xdd, 0x0d, 0x10, 0xb8, 0xb4, 0xf9, 0x7e, 0xbf,
	0xdf, 0xf7, 0x27, 0xbf, 0xef, 0x0b, 0x1a, 0xa9, 0x79, 0xaa, 0xa8, 0x64, 0xa5, 0x66, 0x82, 0x47,
	0xc7, 0xd3, 0xa8, 0x1e, 0x87, 0xa5, 0x14, 0x5a, 0xe0, 0xf5, 0x3b, 0xd8, 0xf1, 0x74, 0xb3, 0x3f,
	0x13, 0x33, 0x61, 0xb9, 0xc8, 0x3c, 0x39, 0xd9, 0x66, 0x40, 0x85, 0x2a, 0x84, 0x8a, 0x52, 0xa2,
	0x20, 0x3a, 0x9e, 0xa6, 0xa0, 0xc9, 0x34, 0xa2, 0x82, 0xf1, 0x6b, 0xfe, 0x7e, 0x2b, 0x2a, 0x05,
	0x57, 0x25, 0x50, 0xc7, 0x8f, 0x7e, 0x7a, 0xa8, 0xb3, 0x47, 0x24, 0x29, 0x14, 0x9e, 0xa2, 0x7e,
	0x5d, 0x9c, 0x00, 0x27, 0x69, 0x0e, 0x99, 0xef, 0x0d, 0xbd, 0x71, 0x37, 0x7e, 0x54, 0xe7, 0x3e,
	0x38, 0x0a, 0xbf, 0x40, 0x78, 0x46, 0x54, 0x52, 0x82, 0x4c, 0xa8, 0xc8, 0x73, 0xa0, 0x86, 0xf4,
	0x9b, 0x43, 0x6f, 0xbc, 0x16, 0x6f, 0xcc, 0x88, 0xda, 0x03, 0xb9, 0x73, 0x83, 0xe3, 0xe7, 0xe8,
	0xe1, 0x21, 0x61, 0xf9, 0x5c, 0x42, 0xa2, 0x45, 0x0e, 0x92, 0x70, 0x0a, 0xfe, 0x92, 0x13, 0x57,
	0xc4, 0xc1, 0x35, 0x3e, 0xba, 0x68, 0xa2, 0xd6, 0x5e, 0x4e, 0x38, 0xee, 0xa3, 0xb6, 0xf8, 0xc6,
	0x41, 0xda, 0x39, 0x7a, 0xb1, 0x0b, 0x0c, 0xaa, 0x99, 0xce, 0xc1, 0x36, 0xeb, 0xc5, 0x2e, 0xc0,
	0x43, 0xb4, 0x92, 0xc1, 0xcd, 0x94, 0xb6, 0x76, 0x2f, 0xae, 0x43, 0xf8, 0x2b, 0x6a, 0x97, 0x92,
	0x51, 0xf0, 0x5b, 0xc3, 0xa5, 0xf1, 0xca, 0xab, 0x27, 0xa1, 0xf3, 0x2f, 0x34, 0xfe, 0x85, 0x95,
	0x7f, 0xe1, 0x8e, 0x60, 0x7c, 0xfb, 0xfd, 0xe9, 0xf9, 0xa0, 0xf1, 0xef, 0x7c, 0xb0, 0xba, 0x20,
	0x45, 0xfe, 0x66, 0x64, 0xb3, 0x46, 0xbf, 0x2f, 0x06, 0xe3, 0x19, 0xd3, 0x47, 0xf3, 0x34, 0xa4,
	0xa2, 0x88, 0x2a, 0xf3, 0xdd, 0xdf, 0x44, 0x65, 0x5f, 0x22, 0xbd, 0x28, 0x41, 0xd9, 0x02, 0x2a,
	0x76, 0x9d, 0xf0, 0x53, 0xb4, 0x96, 0xcd, 0x25, 0xb1, 0x9e, 0x2a, 0xa0, 0xca, 0x6f, 0xdb, 0x57,
	0x5e, 0xbd, 0x06, 0xf7, 0x81, 0x2a, 0xfc, 0x0e, 0xf5, 0xcc, 0x66, 0x12, 0xb3, 0x1a, 0xbf, 0x33,
	0xf4, 0xec, 0x6c, 0xf7, 0x4e, 0x20, 0xdc, 0x91, 0x82, 0xef, 0x97, 0x40, 0xb7, 0x5b, 0x66, 0xb6,
	0xb8, 0x4b, 0xab, 0x18, 0x6f, 0xa2, 0xae, 0xfe, 0x2e, 0x0e, 0x0f, 0x15, 0x68, 0x7f, 0x79, 0xe8,
	0x8d, 0xdb, 0xf1, 0x4d, 0x8c, 0x1f, 0xa3, 0xe5, 0x32, 0x27, 0x3c, 0x61, 0x99, 0xdf, 0x1d, 0x7a,
	0xe3, 0x56, 0xdc, 0x31, 0xe1, 0x6e, 0x36, 0xfa, 0xd5, 0x44, 0xab, 0xfb, 0xb5, 0x0e, 0x78, 0x0b,
	0xdd, 0x39, 0x3a, 0x93, 0xe1, 0xd9, 0x8c, 0x07, 0x75, 0x78, 0x37, 0xab, 0x97, 0x6c, 0xd6, 0x4b,
	0xe2, 0x00, 0xa1, 0x4a, 0x9a, 0x82, 0xac, 0xec, 0xaf, 0x21, 0x78, 0x80, 0x56, 0xa8, 0x04, 0xa2,
	0x21, 0xd1, 0xac, 0x30, 0x3b, 0x30, 0xc9, 0xc8, 0x41, 0x07, 0xac, 0x00, 0xfc, 0x12, 0xf5, 0x39,
	0x9c, 0xe8, 0xda, 0x35, 0x39, 0x65, 0xdb, 0x2a, 0xb1, 0xe1, 0x6e, 0x0f, 0xca, 0x66, 0x6c, 0xa1,
	0x75, 0x38, 0x29, 0x59, 0xe5, 0xaf, 0x15, 0x77, 0xdc, 0xd0, 0xb7, 0xb0, 0x15, 0x3e, 0x43, 0x1b,
	0x25, 0x59, 0x14, 0xc0, 0x75, 0x52, 0x1d, 0x9b, 0xb2, 0x5e, 0xad, 0xc5, 0xeb, 0x15, 0xfe, 0xb1,
	0x82, 0xb7, 0x3f, 0x9d, 0x5e, 0x06, 0xde, 0xd9, 0x65, 0xe0, 0xfd, 0xbd, 0x0c, 0xbc, 0x1f, 0x57,
	0x41, 0xe3, 0xec, 0x2a, 0x68, 0xfc, 0xb9, 0x0a, 0x1a, 0x9f, 0xdf, 0xd6, 0x97, 0x2f, 0x17, 0xa5,
	0x16, 0x13, 0x21, 0x67, 0x13, 0x7a, 0x44, 0x18, 0x8f, 0xec, 0xef, 0xa4, 0x30, 0x8f, 0x27, 0x77,
	0x3e, 0x69, 0x77, 0x15, 0x69, 0xc7, 0x7e, 0x72, 0xaf, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0x30, 0xc7, 0x79, 0xff, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailureTolerance != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.FailureTolerance))
		i--
		dAtA[i] = 0x18
	}
	if m.GasPerCollection != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.GasPerCollection))
		i--
		dAtA[i] = 0x10
	}
	if m.SubscriptionEnabled {
		i--
		if m.SubscriptionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x40
	}
	if m.Tzoffset != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Tzoffset))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.CronSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubscription(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.DurationSecs != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.DurationSecs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubscription(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PaymentFailures != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.PaymentFailures))
		i--
		dAtA[i] = 0x38
	}
	if m.ExpirationTime != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x30
	}
	if m.NextCollectionTime != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.NextCollectionTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PlanId != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x10
	}
	if m.SubscriptionId != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.SubscriptionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubscription(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubscription(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionEnabled {
		n += 2
	}
	if m.GasPerCollection != 0 {
		n += 1 + sovSubscription(uint64(m.GasPerCollection))
	}
	if m.FailureTolerance != 0 {
		n += 1 + sovSubscription(uint64(m.FailureTolerance))
	}
	return n
}

func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovSubscription(uint64(l))
		}
	}
	if m.DurationSecs != 0 {
		n += 1 + sovSubscription(uint64(m.DurationSecs))
	}
	l = m.CronSpec.Size()
	n += 1 + l + sovSubscription(uint64(l))
	if m.Tzoffset != 0 {
		n += 1 + sovSubscription(uint64(m.Tzoffset))
	}
	if m.PlanId != 0 {
		n += 1 + sovSubscription(uint64(m.PlanId))
	}
	return n
}

func (m *Subscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionId != 0 {
		n += 1 + sovSubscription(uint64(m.SubscriptionId))
	}
	if m.PlanId != 0 {
		n += 1 + sovSubscription(uint64(m.PlanId))
	}
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovSubscription(uint64(m.CreateTime))
	}
	if m.NextCollectionTime != 0 {
		n += 1 + sovSubscription(uint64(m.NextCollectionTime))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovSubscription(uint64(m.ExpirationTime))
	}
	if m.PaymentFailures != 0 {
		n += 1 + sovSubscription(uint64(m.PaymentFailures))
	}
	return n
}

func sovSubscription(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubscription(x uint64) (n int) {
	return sovSubscription(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubscriptionEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPerCollection", wireType)
			}
			m.GasPerCollection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPerCollection |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureTolerance", wireType)
			}
			m.FailureTolerance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailureTolerance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationSecs", wireType)
			}
			m.DurationSecs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationSecs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CronSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tzoffset", wireType)
			}
			m.Tzoffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tzoffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			m.SubscriptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCollectionTime", wireType)
			}
			m.NextCollectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCollectionTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentFailures", wireType)
			}
			m.PaymentFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentFailures |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscription(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscription
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubscription
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubscription
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubscription        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscription          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubscription = fmt.Errorf("proto: unexpected end of group")
)
