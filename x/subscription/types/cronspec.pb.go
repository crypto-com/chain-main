// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscription/v1/cronspec.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CronSpec struct {
	Minute []CronItem `protobuf:"bytes,1,rep,name=minute,proto3" json:"minute"`
	Hour   []CronItem `protobuf:"bytes,2,rep,name=hour,proto3" json:"hour"`
	Mday   []CronItem `protobuf:"bytes,3,rep,name=mday,proto3" json:"mday"`
	Month  []CronItem `protobuf:"bytes,4,rep,name=month,proto3" json:"month"`
	Wday   []CronItem `protobuf:"bytes,5,rep,name=wday,proto3" json:"wday"`
}

func (m *CronSpec) Reset()         { *m = CronSpec{} }
func (m *CronSpec) String() string { return proto.CompactTextString(m) }
func (*CronSpec) ProtoMessage()    {}
func (*CronSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_056c1172654ef922, []int{0}
}
func (m *CronSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronSpec.Merge(m, src)
}
func (m *CronSpec) XXX_Size() int {
	return m.Size()
}
func (m *CronSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CronSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CronSpec proto.InternalMessageInfo

func (m *CronSpec) GetMinute() []CronItem {
	if m != nil {
		return m.Minute
	}
	return nil
}

func (m *CronSpec) GetHour() []CronItem {
	if m != nil {
		return m.Hour
	}
	return nil
}

func (m *CronSpec) GetMday() []CronItem {
	if m != nil {
		return m.Mday
	}
	return nil
}

func (m *CronSpec) GetMonth() []CronItem {
	if m != nil {
		return m.Month
	}
	return nil
}

func (m *CronSpec) GetWday() []CronItem {
	if m != nil {
		return m.Wday
	}
	return nil
}

type CronItem struct {
	// Types that are valid to be assigned to Spec:
	//	*CronItem_Value
	//	*CronItem_Range
	Spec isCronItem_Spec `protobuf_oneof:"spec"`
}

func (m *CronItem) Reset()         { *m = CronItem{} }
func (m *CronItem) String() string { return proto.CompactTextString(m) }
func (*CronItem) ProtoMessage()    {}
func (*CronItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_056c1172654ef922, []int{1}
}
func (m *CronItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronItem.Merge(m, src)
}
func (m *CronItem) XXX_Size() int {
	return m.Size()
}
func (m *CronItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CronItem.DiscardUnknown(m)
}

var xxx_messageInfo_CronItem proto.InternalMessageInfo

type isCronItem_Spec interface {
	isCronItem_Spec()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CronItem_Value struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}
type CronItem_Range struct {
	Range *CronRange `protobuf:"bytes,2,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (*CronItem_Value) isCronItem_Spec() {}
func (*CronItem_Range) isCronItem_Spec() {}

func (m *CronItem) GetSpec() isCronItem_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CronItem) GetValue() uint32 {
	if x, ok := m.GetSpec().(*CronItem_Value); ok {
		return x.Value
	}
	return 0
}

func (m *CronItem) GetRange() *CronRange {
	if x, ok := m.GetSpec().(*CronItem_Range); ok {
		return x.Range
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CronItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CronItem_Value)(nil),
		(*CronItem_Range)(nil),
	}
}

type CronRange struct {
	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop  uint32 `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`
	Step  uint32 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *CronRange) Reset()         { *m = CronRange{} }
func (m *CronRange) String() string { return proto.CompactTextString(m) }
func (*CronRange) ProtoMessage()    {}
func (*CronRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_056c1172654ef922, []int{2}
}
func (m *CronRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronRange.Merge(m, src)
}
func (m *CronRange) XXX_Size() int {
	return m.Size()
}
func (m *CronRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CronRange.DiscardUnknown(m)
}

var xxx_messageInfo_CronRange proto.InternalMessageInfo

func (m *CronRange) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CronRange) GetStop() uint32 {
	if m != nil {
		return m.Stop
	}
	return 0
}

func (m *CronRange) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func init() {
	proto.RegisterType((*CronSpec)(nil), "subscription.v1.CronSpec")
	proto.RegisterType((*CronItem)(nil), "subscription.v1.CronItem")
	proto.RegisterType((*CronRange)(nil), "subscription.v1.CronRange")
}

func init() { proto.RegisterFile("subscription/v1/cronspec.proto", fileDescriptor_056c1172654ef922) }

var fileDescriptor_056c1172654ef922 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x93, 0x36, 0x29, 0x7a, 0xa5, 0x08, 0x47, 0x91, 0xd8, 0xe1, 0x2c, 0x9d, 0xba, 0x34,
	0xa1, 0x2d, 0xe2, 0xe0, 0x56, 0x17, 0xbb, 0x46, 0x5c, 0x1c, 0x84, 0xf4, 0x3c, 0x92, 0x80, 0xb9,
	0x3b, 0x2e, 0x97, 0x6a, 0xff, 0x0b, 0x57, 0xff, 0xa3, 0x8e, 0x1d, 0x9d, 0x44, 0x9a, 0x7f, 0x44,
	0xde, 0x9d, 0x8a, 0x8a, 0x43, 0x96, 0xe3, 0xfd, 0xf8, 0x7c, 0xdf, 0x17, 0xde, 0x3d, 0x44, 0xca,
	0x6a, 0x55, 0x52, 0x95, 0x4b, 0x9d, 0x0b, 0x1e, 0xad, 0xa7, 0x11, 0x55, 0x82, 0x97, 0x92, 0xd1,
	0x50, 0x2a, 0xa1, 0x05, 0x3e, 0xfa, 0xd9, 0x0f, 0xd7, 0xd3, 0x41, 0x3f, 0x15, 0xa9, 0x30, 0xbd,
	0x08, 0x22, 0x8b, 0x8d, 0x5e, 0x5a, 0xe8, 0xe0, 0x52, 0x09, 0x7e, 0x2d, 0x19, 0xc5, 0xe7, 0xa8,
	0x53, 0xe4, 0xbc, 0xd2, 0x2c, 0x70, 0x87, 0xed, 0x71, 0x77, 0x76, 0x12, 0xfe, 0x19, 0x12, 0x02,
	0xba, 0xd4, 0xac, 0x58, 0x78, 0xdb, 0xb7, 0x53, 0x27, 0xfe, 0xc4, 0xf1, 0x1c, 0x79, 0x99, 0xa8,
	0x54, 0xd0, 0x6a, 0x26, 0x33, 0x30, 0x88, 0x8a, 0xfb, 0x64, 0x13, 0xb4, 0x1b, 0x8a, 0x00, 0xc6,
	0x67, 0xc8, 0x2f, 0x04, 0xd7, 0x59, 0xe0, 0x35, 0x53, 0x59, 0x1a, 0xbc, 0x1e, 0xc1, 0xcb, 0x6f,
	0xe8, 0x05, 0xf0, 0xe8, 0xce, 0xae, 0x06, 0xea, 0xf8, 0x18, 0xf9, 0xeb, 0xe4, 0xa1, 0x82, 0xcd,
	0xb8, 0xe3, 0xde, 0x95, 0x13, 0xdb, 0x14, 0xcf, 0x90, 0xaf, 0x12, 0x9e, 0xb2, 0xa0, 0x35, 0x74,
	0xc7, 0xdd, 0xd9, 0xe0, 0xdf, 0xc9, 0x31, 0x10, 0xa0, 0x31, 0xe8, 0xa2, 0x83, 0x3c, 0xf8, 0xa8,
	0xd1, 0x12, 0x1d, 0x7e, 0x77, 0x71, 0x1f, 0xf9, 0xa5, 0x4e, 0x94, 0xb6, 0x06, 0xb1, 0x4d, 0x30,
	0x46, 0x5e, 0xa9, 0x85, 0x34, 0xd3, 0x7b, 0xb1, 0x89, 0x6d, 0x8d, 0xc9, 0xa0, 0xfd, 0x55, 0x63,
	0x72, 0x71, 0xb3, 0xdd, 0x13, 0x77, 0xb7, 0x27, 0xee, 0xfb, 0x9e, 0xb8, 0xcf, 0x35, 0x71, 0x76,
	0x35, 0x71, 0x5e, 0x6b, 0xe2, 0xdc, 0x5e, 0xa4, 0xb9, 0xce, 0xaa, 0x55, 0x48, 0x45, 0x11, 0x51,
	0xb5, 0x91, 0x5a, 0x4c, 0x84, 0x4a, 0x27, 0x34, 0x4b, 0x72, 0x1e, 0x99, 0x77, 0x52, 0x40, 0xf8,
	0x14, 0xfd, 0x3a, 0x28, 0xbd, 0x91, 0xac, 0x5c, 0x75, 0xcc, 0x91, 0xcc, 0x3f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xd0, 0xea, 0xaa, 0x31, 0x6d, 0x02, 0x00, 0x00,
}

func (m *CronSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wday) > 0 {
		for iNdEx := len(m.Wday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCronspec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Month) > 0 {
		for iNdEx := len(m.Month) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Month[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCronspec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Mday) > 0 {
		for iNdEx := len(m.Mday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCronspec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hour) > 0 {
		for iNdEx := len(m.Hour) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hour[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCronspec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Minute) > 0 {
		for iNdEx := len(m.Minute) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Minute[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCronspec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CronItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size := m.Spec.Size()
			i -= size
			if _, err := m.Spec.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CronItem_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronItem_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCronspec(dAtA, i, uint64(m.Value))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *CronItem_Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronItem_Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCronspec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CronRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Step != 0 {
		i = encodeVarintCronspec(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.Stop != 0 {
		i = encodeVarintCronspec(dAtA, i, uint64(m.Stop))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintCronspec(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCronspec(dAtA []byte, offset int, v uint64) int {
	offset -= sovCronspec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CronSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Minute) > 0 {
		for _, e := range m.Minute {
			l = e.Size()
			n += 1 + l + sovCronspec(uint64(l))
		}
	}
	if len(m.Hour) > 0 {
		for _, e := range m.Hour {
			l = e.Size()
			n += 1 + l + sovCronspec(uint64(l))
		}
	}
	if len(m.Mday) > 0 {
		for _, e := range m.Mday {
			l = e.Size()
			n += 1 + l + sovCronspec(uint64(l))
		}
	}
	if len(m.Month) > 0 {
		for _, e := range m.Month {
			l = e.Size()
			n += 1 + l + sovCronspec(uint64(l))
		}
	}
	if len(m.Wday) > 0 {
		for _, e := range m.Wday {
			l = e.Size()
			n += 1 + l + sovCronspec(uint64(l))
		}
	}
	return n
}

func (m *CronItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		n += m.Spec.Size()
	}
	return n
}

func (m *CronItem_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCronspec(uint64(m.Value))
	return n
}
func (m *CronItem_Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovCronspec(uint64(l))
	}
	return n
}
func (m *CronRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovCronspec(uint64(m.Start))
	}
	if m.Stop != 0 {
		n += 1 + sovCronspec(uint64(m.Stop))
	}
	if m.Step != 0 {
		n += 1 + sovCronspec(uint64(m.Step))
	}
	return n
}

func sovCronspec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCronspec(x uint64) (n int) {
	return sovCronspec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CronSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronspec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minute = append(m.Minute, CronItem{})
			if err := m.Minute[len(m.Minute)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hour = append(m.Hour, CronItem{})
			if err := m.Hour[len(m.Hour)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mday = append(m.Mday, CronItem{})
			if err := m.Mday[len(m.Mday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Month = append(m.Month, CronItem{})
			if err := m.Month[len(m.Month)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wday = append(m.Wday, CronItem{})
			if err := m.Wday[len(m.Wday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronspec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronspec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronspec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spec = &CronItem_Value{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronspec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronspec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CronRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &CronItem_Range{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronspec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronspec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronspec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			m.Stop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stop |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCronspec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronspec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCronspec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCronspec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronspec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCronspec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCronspec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCronspec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCronspec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCronspec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCronspec = fmt.Errorf("proto: unexpected end of group")
)
