syntax = "proto3";

package subscription.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "subscription/v1/subscription.proto";

option go_package = "github.com/crypto-org-chain/chain-main/x/subscription/types";

// Query defines the gRPC querier service for subscription module
service Query {
  rpc Plan(QueryPlanRequest) returns (QueryPlanResponse) {
    option (google.api.http).get = "/chainmain/subscription/v1/plan/{plan_id}";
  }

  rpc Plans(QueryPlansRequest) returns (QueryPlansResponse) {
    option (google.api.http).get = "/chainmain/subscription/v1/plans";
  }

  rpc Subscription(QuerySubscriptionRequest) returns (QuerySubscriptionResponse) {
    option (google.api.http).get = "/chainmain/subscription/v1/subscription/{subscription_id}";
  }

  rpc Subscriptions(QuerySubscriptionsRequest) returns (QuerySubscriptionsResponse) {
    option (google.api.http).get = "/chainmain/subscription/v1/subscriptions";
  }

  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/chainmain/subscription/v1/params";
  }
}

message QueryPlanRequest {
  uint64 plan_id = 1;
}

message QueryPlanResponse {
  Plan plan = 1 [(gogoproto.nullable) = false];
}

message QueryPlansRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string owner = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryPlansResponse {
  repeated Plan plans = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySubscriptionRequest {
  uint64 subscription_id = 1;
}

message QuerySubscriptionResponse {
  Subscription subscription = 1 [(gogoproto.nullable) = false];
}

message QuerySubscriptionsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  int64 plan_id = 1;  // -1 means all
  string subscriber = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QuerySubscriptionsResponse {
  repeated Subscription subscriptions = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryParamsRequest {
}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

